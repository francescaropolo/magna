{"version":3,"sources":["components/Loading.js","libs/theme.js","App.js","reportWebVitals.js","index.js"],"names":["Content","styled","div","Loading","props","style","width","height","paddingBottom","position","src","frameBorder","className","allowFullScreen","theme","colors","white","background","black","red","orange","yellowOrange","mango","lightYellow","green","acquaGreen","darkAcquaGreen","blueGrey","blue","smQuery","mdQuery","lgQuery","xlQuery","spacing","value","typography","primaryFont","secondaryFont","HomePage","lazy","RecipePage","CategoryPage","NotFound","App","fallback","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8HAIMA,EAAUC,IAAOC,IAAV,8EAgBEC,IAZC,SAAAC,GACZ,OACI,cAACJ,EAAD,UACI,qBAAKK,MAAO,CAACC,MAAM,OAAOC,OAAO,EAAEC,cAAc,MAAMC,SAAS,YAAhE,SAA6E,wBAAQC,IAAI,4CAA4CJ,MAAM,OAAOC,OAAO,OAAOF,MAAO,CAACI,SAAS,YAAaE,YAAY,IAAIC,UAAU,cAAcC,iBAAe,U,+HCkBlPC,EA7BD,CACVC,OAAQ,CACJC,MAAO,UACPC,WAAY,UACZC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,aAAc,UACdC,MAAO,UACPC,YAAa,UACbC,MAAO,UACPC,WAAY,UACZC,eAAgB,UAChBC,SAAU,UACVC,KAAM,WAEVC,QAAS,QACTC,QAAS,QACTC,QAAS,QACTC,QAAS,SACTC,QAAS,SAACC,GACN,MAAM,GAAN,OAAkB,GAARA,EAAV,OAEJC,WAAY,CACRC,YAAa,wBACbC,cAAe,6B,eCnBjBC,EAAWC,gBAAK,kBAAM,iCACtBC,EAAaD,gBAAK,kBAAM,uDACxBE,EAAeF,gBAAK,kBAAM,iCAC1BG,EAAWH,gBAAK,kBAAM,iCAqBbI,MAnBf,WACE,OACE,cAAC,IAAD,CAAe7B,MAAOA,EAAtB,SACI,cAAC,IAAD,UACE,cAAC,WAAD,CAAU8B,SAAU,cAACzC,EAAA,EAAD,IAApB,SACE,yBAASS,UAAU,UAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,cAAC,IAAD,CAAOQ,KAAK,cAAcC,UAAWP,IACrC,cAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWN,IACnC,cAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWL,gBCT5BM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da5acb3f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Content = styled.div`\n    display: flex;\n    justify-content: center;\n`\nconst Loading = props => {\n    return (\n        <Content>\n            <div style={{width:'100%',height:0,paddingBottom:'56%',position:'relative'}}><iframe src=\"https://giphy.com/embed/l0HlKrB02QY0f1mbm\" width=\"100%\" height=\"100%\" style={{position:'absolute'}} frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe></div>\n        </Content>\n    );\n};\n\nLoading.propTypes = {\n    \n};\n\nexport default Loading;","const theme = {\n    colors: {\n        white: '#FAFAFA',\n        background: '#FFFCF8',\n        black: '#333333',\n        red: '#F94144',\n        orange: '#F3722C',\n        yellowOrange: '#F8961E',\n        mango: '#F9844A',\n        lightYellow: '#F9C74F',\n        green: '#90BE6D',\n        acquaGreen: '#43AA8B',\n        darkAcquaGreen: '#4D908E',\n        blueGrey: '#577590',\n        blue: '#277DA1'\n    },\n    smQuery: \"576px\",\n    mdQuery: \"768px\",\n    lgQuery: \"992px\",\n    xlQuery: \"1200px\",\n    spacing: (value) => {\n        return `${value * 10}px`\n    },\n    typography: {\n        primaryFont: \"'Merriweather', serif\",\n        secondaryFont: \"'Montserrat', sans-serif\",\n    }\n}\n\nexport default theme;\n","import React, { Suspense, lazy } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport theme from './libs/theme';\nimport Loading from './components/Loading';\n\nconst HomePage = lazy(() => import(\"./pages/Homepage\"));\nconst RecipePage = lazy(() => import(\"./pages/Recipe\"));\nconst CategoryPage = lazy(() => import(\"./pages/Category\"));\nconst NotFound = lazy(() => import(\"./pages/NotFound\"));\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n        <Router>\n          <Suspense fallback={<Loading />}>\n            <section className=\"content\">\n              <Switch>\n                <Route exact path=\"/\" component={HomePage} />\n                <Route path=\"/recipe/:id\" component={RecipePage} />\n                <Route path=\"/tags/:id\" component={CategoryPage} />\n                <Route path=\"*\" component={NotFound} />\n              </Switch>\n            </section>\n          </Suspense>\n        </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}